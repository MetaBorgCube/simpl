module trans/simpl

imports
  src-gen/ds-signatures/simpl-sig
  trans/runtime/runtime
  
signature
  constructors
    NumV: Int -> V
    StringV: String -> V
    RegexV: NFA -> V
  
  arrows
    E |- lookup(Map(String, Int)) :: H --> V :: H
    Exp -default-> V
    List(Exp) --> V
     
  native operators
    parseI: String -> Int
    addI: Int * Int -> Int
    subI: Int * Int -> Int
    mulI: Int * Int -> Int
    concatS: String * String -> String
    unquoteS: String -> String
    explodeS: String -> List(String)
  
  sort aliases
    SS = List(String)
    
signature
  arrows 
    Prog -init-> V
  
rules
  
  Program(e) -init-> v
  where
    E {} |- e :: H {} --> v :: H _.
    
rules
  
  Lit(s) --> NumV(parseI(s)).
  
  Plus(NumV(i1), NumV(i2)) --> NumV(addI(i1, i2)).
  
  Minus(NumV(i1), NumV(i2)) --> NumV(subI(i1, i2)).
  
  Times(NumV(i1), NumV(i2)) --> NumV(mulI(i1, i2)).


rules

  Let(x, v1, e2) --> v2
  where
    E bindVar(x, v1) |- e2 --> v2.
  
  Var(x) --> readVar(x).

signature
  constructors
    BoxV: Int -> V

rules
  Box(v) --> BoxV(allocate(v)).
  
  Unbox(BoxV(addr)) --> read(addr).
  
  Setbox(BoxV(addr), v) --> write(addr,v).

signature
  constructors
    ClosV: String * Exp * Env -> V

rules
  E |- Fun(x, e) --> ClosV(x, e, E).
  
  App(ClosV(x, e, E), v1) --> v2
  where
    E  |- bindVar(x, v1) --> E';
    E' |- e --> v2.

rules
  
  Ifz(NumV(ci), e1, e2) --> v
  where
    case ci of {
      0 =>
        e1 --> v
      otherwise =>
        e2 --> v
    }.

rules
  
  Block(es) --> v
  where
    es --> v.
  
  es : List(Exp) --> v
  where
    case es of {
      [e] =>
        e --> v
      [e|es'] =>
        e --> _;
        es' --> v
    }.

rules
  
  ExpRegex(regex) --> RegexV(regex).
  
  String(s) --> StringV(unquoteS(s)).
  
  Plus(StringV(s1), StringV(s2)) --> StringV(concatS(s1, s2)).
  
  Match(v@StringV(s), RegexV(nfa)) --> v 
  where
    nfa-simulate(nfa, explodeS(s)) --> true.

/*
* ============
* REGEX to NFA
* ============
*/

signature
  arrows
    Regex --> NFA

rules

  Epsilon(_) --> NFA([i, f], i, f, { I(i,"") |--> [f] })
  where
    fresh => i;
    fresh => f.

  Char(c) --> NFA([i, f], i, f, { I(i, c) |--> [f] })
  where
    fresh => i;
    fresh => f.

  Alt(r1, r2) --> NFA([i, f | ss], i, f, { I(i,"") |--> [i1, i2],
                                           I(f1,"") |--> [f],
                                           I(f2,"") |--> [f],
                                           t1, t2
                                         })
  where
    fresh => i;
    fresh => f;
    r1 --> NFA(ss1, i1, f1, t1);
    r2 --> NFA(ss2, i2, f2, t2);
    concat(ss1, ss2) => ss.

  Seq(r1, r2) --> NFA(ss, i1, f2, { I(f1, "") |--> [i2],  
                                    t1, t2
                                  })
  where
    r1 --> NFA(ss1, i1, f1, t1);
    r2 --> NFA(ss2, i2, f2, t2);
    concat(ss1, ss2) => ss.

  Kleene(r) --> NFA([i, f | ss1], i, f, { I(i,"") |--> [i1, f],
                                          I(f1,"") |--> [i1, f],
                                          t1
                                        })
  where
    fresh => i;
    fresh => f;
    r --> NFA(ss1, i1, f1, t1).

  Group(r) --> r.
  

  
  
  
