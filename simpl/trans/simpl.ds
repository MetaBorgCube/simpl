module trans/simpl

imports
  src-gen/ds-signatures/simpl-sig

signature
  sorts
    V
  
  constructors
    NumV: Int -> V

  arrows
    Exp --> V
  
  variables
    v : V

  native operators
    parseI: String -> Int
    addI: Int * Int -> Int
    subI: Int * Int -> Int
    mulI: Int * Int -> Int
    
rules
  
  Lit(s) --> NumV(parseI(s)).
  
  Plus(NumV(i1), NumV(i2)) --> NumV(addI(i1, i2)).
  
  Minus(NumV(i1), NumV(i2)) --> NumV(subI(i1, i2)).
  
  Times(NumV(i1), NumV(i2)) --> NumV(mulI(i1, i2)).

signature
  sort aliases
    Env = Map<String,V>
  variables
    E : Env

rules
  E |- Let(x, v1, e2) --> v2
  where
    Env {x |--> v1, E} |- e2 --> v2.
  
  E |- Var(x) --> E[x].

signature
  sort aliases
    Heap = Map<Int, V>
  
  variables
    H : Heap
  
  constructors
    BoxV: Int -> V

rules

  Box(e) :: H --> BoxV(addr) :: Heap {addr |--> v, H'}
  where
    e :: H --> v :: H';
    fresh => addr.
  
  Unbox(e) :: H --> H'[addr] :: H'
  where
    e :: H --> BoxV(addr) :: H'.
  
  Setbox(box, e) :: H --> v :: Heap {addr |--> v, H''}
  where
    box :: H --> BoxV(addr) :: H';
    e :: H' --> v :: H''.
